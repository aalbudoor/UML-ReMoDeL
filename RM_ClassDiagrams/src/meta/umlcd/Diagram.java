/**
 * ReMoDeL (Reusable Model Design Languages) tools for developing
 * and compiling metamodels, models and model transformations.
 *
 * Copyright (c) 2020-2022 Anthony J H Simons
 * University of Sheffield, UK.  All rights reserved.
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This software is proprietary software, whose IP is owned by
 * Anthony J H Simons and the University of Sheffield.  All use of
 * this software must be covered by a license drawn up with the
 * owners.
 *
 * Please contact the Department of Computer Science, University of
 * Sheffield, Regent Court, 211 Portobello, Sheffield S1 4DP, UK or
 * visit www.sheffield.ac.uk/dcs if you need additional information
 * or have any questions.
 */

package meta.umlcd;

/**
 * Requires remodel.util.PureList or remodel.util.PureSet
 */
import remodel.util.*;

/**
 * Diagram is derived from the ReMoDeL concept UmlCd_Diagram.
 * Generated by ReMoDeL on Tue Nov 01 14:39:19 GMT 2022.
 * 
 * @author ReMoDeL by Anthony J H Simons
 * @version 3.1
 */
public class Diagram extends Named {

   /**
    * Field basicTypes is derived from the component basicTypes.
    */
   protected PureSet<BasicType> basicTypes = new PureSet<BasicType>();

   /**
    * Method getBasicTypes() is derived from the component basicTypes.
    */
   public PureSet<BasicType> getBasicTypes() {
      return basicTypes;
   }

   /**
    * Method setBasicTypes() is derived from the component basicTypes.
    */
   public Diagram setBasicTypes(PureSet<BasicType> basicTypes) {
      this.basicTypes = basicTypes;
      return this;
   }

   /**
    * Field classTypes is derived from the component classTypes.
    */
   protected PureSet<ClassType> classTypes = new PureSet<ClassType>();

   /**
    * Method getClassTypes() is derived from the component classTypes.
    */
   public PureSet<ClassType> getClassTypes() {
      return classTypes;
   }

   /**
    * Method setClassTypes() is derived from the component classTypes.
    */
   public Diagram setClassTypes(PureSet<ClassType> classTypes) {
      this.classTypes = classTypes;
      return this;
   }

   /**
    * Field generalisations is derived from the component generalisations.
    */
   protected PureSet<Generalisation> generalisations = new PureSet<Generalisation>();

   /**
    * Method getGeneralisations() is derived from the component generalisations.
    */
   public PureSet<Generalisation> getGeneralisations() {
      return generalisations;
   }

   /**
    * Method setGeneralisations() is derived from the component generalisations.
    */
   public Diagram setGeneralisations(PureSet<Generalisation> generalisations) {
      this.generalisations = generalisations;
      return this;
   }

   /**
    * Field aggregations is derived from the component aggregations.
    */
   protected PureSet<Aggregation> aggregations = new PureSet<Aggregation>();

   /**
    * Method getAggregations() is derived from the component aggregations.
    */
   public PureSet<Aggregation> getAggregations() {
      return aggregations;
   }

   /**
    * Method setAggregations() is derived from the component aggregations.
    */
   public Diagram setAggregations(PureSet<Aggregation> aggregations) {
      this.aggregations = aggregations;
      return this;
   }

   /**
    * Field compositions is derived from the component compositions.
    */
   protected PureSet<Composition> compositions = new PureSet<Composition>();

   /**
    * Method getCompositions() is derived from the component compositions.
    */
   public PureSet<Composition> getCompositions() {
      return compositions;
   }

   /**
    * Method setCompositions() is derived from the component compositions.
    */
   public Diagram setCompositions(PureSet<Composition> compositions) {
      this.compositions = compositions;
      return this;
   }

   /**
    * Field associations is derived from the component associations.
    */
   protected PureSet<Association> associations = new PureSet<Association>();

   /**
    * Method getAssociations() is derived from the component associations.
    */
   public PureSet<Association> getAssociations() {
      return associations;
   }

   /**
    * Method setAssociations() is derived from the component associations.
    */
   public Diagram setAssociations(PureSet<Association> associations) {
      this.associations = associations;
      return this;
   }

   /**
    * Redefined method setName() is derived from the attribute name.
    */
   @Override
   public Diagram setName(String name) {
      return (Diagram) super.setName(name);
   }

   /**
    * Default constructor Diagram() is derived from the concept Diagram.
    */
   public Diagram() {
   }

}
