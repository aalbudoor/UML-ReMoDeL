/**
 * ReMoDeL (Reusable Model Design Languages) tools for developing
 * and compiling metamodels, models and model transformations.
 *
 * Copyright (c) 2020-2022 Anthony J H Simons
 * University of Sheffield, UK.  All rights reserved.
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This software is proprietary software, whose IP is owned by
 * Anthony J H Simons and the University of Sheffield.  All use of
 * this software must be covered by a license drawn up with the
 * owners.
 *
 * Please contact the Department of Computer Science, University of
 * Sheffield, Regent Court, 211 Portobello, Sheffield S1 4DP, UK or
 * visit www.sheffield.ac.uk/dcs if you need additional information
 * or have any questions.
 */

package meta.umlcd;

/**
 * Requires remodel.util.PureList or remodel.util.PureSet
 */
import remodel.util.*;

/**
 * ClassType is derived from the ReMoDeL concept UmlCd_ClassType.
 * Generated by ReMoDeL on Tue Nov 01 14:39:19 GMT 2022.
 * 
 * @author ReMoDeL by Anthony J H Simons
 * @version 3.1
 */
public class ClassType extends Type {

   /**
    * Field attributes is derived from the component attributes.
    */
   protected PureSet<Attribute> attributes = new PureSet<Attribute>();

   /**
    * Method getAttributes() is derived from the component attributes.
    */
   public PureSet<Attribute> getAttributes() {
      return attributes;
   }

   /**
    * Method setAttributes() is derived from the component attributes.
    */
   public ClassType setAttributes(PureSet<Attribute> attributes) {
      this.attributes = attributes;
      return this;
   }

   /**
    * Field operations is derived from the component operations.
    */
   protected PureSet<Operation> operations = new PureSet<Operation>();

   /**
    * Method getOperations() is derived from the component operations.
    */
   public PureSet<Operation> getOperations() {
      return operations;
   }

   /**
    * Method setOperations() is derived from the component operations.
    */
   public ClassType setOperations(PureSet<Operation> operations) {
      this.operations = operations;
      return this;
   }

   /**
    * Method identifiers() is derived from the operation identifiers.
    */
   public PureSet<Attribute> identifiers() {
      return attributes.select(new Predicate<Attribute>() {
         public boolean apply(Attribute attrib) {
            return attrib.getId();
         }
      });
   }

   /**
    * Method dependents() is derived from the operation dependents.
    */
   public PureSet<Attribute> dependents() {
      return attributes.reject(new Predicate<Attribute>() {
         public boolean apply(Attribute attrib) {
            return attrib.getId();
         }
      });
   }

   /**
    * Redefined method setName() is derived from the attribute name.
    */
   @Override
   public ClassType setName(String name) {
      return (ClassType) super.setName(name);
   }

   /**
    * Default constructor ClassType() is derived from the concept ClassType.
    */
   public ClassType() {
   }

}
