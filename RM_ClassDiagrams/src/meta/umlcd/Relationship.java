/**
 * ReMoDeL (Reusable Model Design Languages) tools for developing
 * and compiling metamodels, models and model transformations.
 *
 * Copyright (c) 2020-2022 Anthony J H Simons
 * University of Sheffield, UK.  All rights reserved.
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This software is proprietary software, whose IP is owned by
 * Anthony J H Simons and the University of Sheffield.  All use of
 * this software must be covered by a license drawn up with the
 * owners.
 *
 * Please contact the Department of Computer Science, University of
 * Sheffield, Regent Court, 211 Portobello, Sheffield S1 4DP, UK or
 * visit www.sheffield.ac.uk/dcs if you need additional information
 * or have any questions.
 */

package meta.umlcd;


/**
 * Relationship is derived from the ReMoDeL concept UmlCd_Relationship.
 * Generated by ReMoDeL on Tue Nov 01 14:39:19 GMT 2022.
 * 
 * @author ReMoDeL by Anthony J H Simons
 * @version 3.1
 */
public class Relationship extends Named {

   /**
    * Field source is derived from the component source.
    */
   protected EndRole source;

   /**
    * Method getSource() is derived from the component source.
    */
   public EndRole getSource() {
      return source;
   }

   /**
    * Method setSource() is derived from the component source.
    */
   public Relationship setSource(EndRole source) {
      this.source = source;
      return this;
   }

   /**
    * Field target is derived from the component target.
    */
   protected EndRole target;

   /**
    * Method getTarget() is derived from the component target.
    */
   public EndRole getTarget() {
      return target;
   }

   /**
    * Method setTarget() is derived from the component target.
    */
   public Relationship setTarget(EndRole target) {
      this.target = target;
      return this;
   }

   /**
    * Method isOneToOne() is derived from the operation isOneToOne.
    */
   public boolean isOneToOne() {
      return source.isOne() && target.isOne();
   }

   /**
    * Method isOneToMany() is derived from the operation isOneToMany.
    */
   public boolean isOneToMany() {
      return source.isOne() && target.isMany();
   }

   /**
    * Method isManyToOne() is derived from the operation isManyToOne.
    */
   public boolean isManyToOne() {
      return source.isMany() && target.isOne();
   }

   /**
    * Method isManyToMany() is derived from the operation isManyToMany.
    */
   public boolean isManyToMany() {
      return source.isMany() && target.isMany();
   }

   /**
    * Redefined method setName() is derived from the attribute name.
    */
   @Override
   public Relationship setName(String name) {
      return (Relationship) super.setName(name);
   }

   /**
    * Default constructor Relationship() is derived from the concept Relationship.
    */
   public Relationship() {
   }

}
