/**
 * ReMoDeL (Reusable Model Design Languages) tools for developing
 * and compiling metamodels, models and model transformations.
 *
 * Copyright (c) 2020-2022 Anthony J H Simons
 * University of Sheffield, UK.  All rights reserved.
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This software is proprietary software, whose IP is owned by
 * Anthony J H Simons and the University of Sheffield.  All use of
 * this software must be covered by a license drawn up with the
 * owners.
 *
 * Please contact the Department of Computer Science, University of
 * Sheffield, Regent Court, 211 Portobello, Sheffield S1 4DP, UK or
 * visit www.sheffield.ac.uk/dcs if you need additional information
 * or have any questions.
 */

package meta.umlcd;

/**
 * Requires remodel.util.PureList or remodel.util.PureSet
 */
import remodel.util.*;

/**
 * Operation is derived from the ReMoDeL concept UmlCd_Operation.
 * Generated by ReMoDeL on Tue Nov 01 14:39:19 GMT 2022.
 * 
 * @author ReMoDeL by Anthony J H Simons
 * @version 3.1
 */
public class Operation extends Typed {

   /**
    * Field specification is derived from the attribute specification.
    */
   protected boolean specification;

   /**
    * Method getSpecification() is derived from the attribute specification.
    */
   public boolean getSpecification() {
      return specification;
   }

   /**
    * Method setSpecification() is derived from the attribute specification.
    */
   public Operation setSpecification(boolean specification) {
      this.specification = specification;
      return this;
   }

   /**
    * Field arguments is derived from the component arguments.
    */
   protected PureList<Variable> arguments = new PureList<Variable>();

   /**
    * Method getArguments() is derived from the component arguments.
    */
   public PureList<Variable> getArguments() {
      return arguments;
   }

   /**
    * Method setArguments() is derived from the component arguments.
    */
   public Operation setArguments(PureList<Variable> arguments) {
      this.arguments = arguments;
      return this;
   }

   /**
    * Redefined method setType() is derived from the reference type.
    */
   @Override
   public Operation setType(Type type) {
      return (Operation) super.setType(type);
   }

   /**
    * Redefined method setName() is derived from the attribute name.
    */
   @Override
   public Operation setName(String name) {
      return (Operation) super.setName(name);
   }

   /**
    * Default constructor Operation() is derived from the concept Operation.
    */
   public Operation() {
   }

}
