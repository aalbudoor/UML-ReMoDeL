/**
 * ReMoDeL (Reusable Model Design Languages) tools for developing
 * and compiling metamodels, models and model transformations.
 *
 * Copyright (c) 2020-2022 Anthony J H Simons
 * University of Sheffield, UK.  All rights reserved.
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This software is proprietary software, whose IP is owned by
 * Anthony J H Simons and the University of Sheffield.  All use of
 * this software must be covered by a license drawn up with the
 * owners.
 *
 * Please contact the Department of Computer Science, University of
 * Sheffield, Regent Court, 211 Portobello, Sheffield S1 4DP, UK or
 * visit www.sheffield.ac.uk/dcs if you need additional information
 * or have any questions.
 */

package meta.graph;

/**
 * Requires remodel.util.Top as the standard root class
 * Requires remodel.util.PureList or remodel.util.PureSet
 */
import remodel.util.*;

/**
 * Graph is derived from the ReMoDeL concept Graph_Graph.
 * Generated by ReMoDeL on Tue Apr 04 03:26:37 BST 2023.
 * 
 * @author ReMoDeL by Anthony J H Simons
 * @version 3.1
 */
public class Graph extends Top {

   /**
    * Field vertices is derived from the component vertices.
    */
   protected PureList<Vertex> vertices = new PureList<Vertex>();

   /**
    * Method getVertices() is derived from the component vertices.
    */
   public PureList<Vertex> getVertices() {
      return vertices;
   }

   /**
    * Method setVertices() is derived from the component vertices.
    */
   public Graph setVertices(PureList<Vertex> vertices) {
      this.vertices = vertices;
      return this;
   }

   /**
    * Field edges is derived from the component edges.
    */
   protected PureList<Edge> edges = new PureList<Edge>();

   /**
    * Method getEdges() is derived from the component edges.
    */
   public PureList<Edge> getEdges() {
      return edges;
   }

   /**
    * Method setEdges() is derived from the component edges.
    */
   public Graph setEdges(PureList<Edge> edges) {
      this.edges = edges;
      return this;
   }

   /**
    * Method root() is derived from the operation root.
    */
   public Vertex root() {
      return vertices.detect(new Predicate<Vertex>() {
         public boolean apply(Vertex vertex) {
            return !edges.exists(new Predicate<Edge>() {
               public boolean apply(Edge edge) {
                  return edge.getSource() == vertex;
               }
            });
         }
      });
   }

   /**
    * Default constructor Graph() is derived from the concept Graph.
    */
   public Graph() {
   }

}
